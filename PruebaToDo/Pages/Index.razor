@page "/"
@using PruebaToDo.Models
@inject HttpClient httpClient

<h3>Lista de Tareas</h3>

@if (tasks != null)
{
    <table class="table">
        <thead>
            <tr>
                <th>Descripción</th>
                <th>Estado</th>
                <th>Acciones</th>
                <th>Nueva Descripción</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var task in tasks.Todos)
            {
                <tr>
                    <td>@task.Description</td>
                    <td>@(task.Completed ? "Completada" : "Pendiente")</td>
                    <td>
                        <button @onclick="() => EditTask(task)">Editar</button>
                        <button @onclick="() => DeleteTask(task.Id)">Eliminar</button>
                        <button @onclick="() => MarkAsCompleted(task.Id)">Marcar como Completada</button>
                    </td>
                    <td>
                        @if (editedTaskDescription != null && editedTaskDescription == task.Description)
                        {
                            <input @bind="editedTaskDescription" />
                            <button @onclick="() => UpdateTask(task)">Actualizar</button>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<h3>Agregar Tarea</h3>
<form @onsubmit="AddTask">
    <label>Descripción:</label>
    <input @bind="newTaskDescription" />
    <button type="submit">Agregar Tarea</button>
</form>

@code {
    Response tasks;
    string newTaskDescription;
    string editedTaskDescription;

    protected override async Task OnInitializedAsync()
    {
        tasks = await httpClient.GetFromJsonAsync<Response>("https://dummyjson.com/todos");
    }

    void EditTask(TaskModel task)
    {
        editedTaskDescription = task.Description;
    }

    void UpdateTask(TaskModel task)
    {
        var taskToUpdate = tasks.Todos.FirstOrDefault(t => t.Description == editedTaskDescription);
        if (taskToUpdate != null)
        {
            taskToUpdate.Description = editedTaskDescription;
            editedTaskDescription = null; // Limpiar la descripción editada después de la actualización
        }
    }

    void DeleteTask(int taskId)
    {
        tasks.Todos.RemoveAll(t => t.Id == taskId);
    }

    void MarkAsCompleted(int taskId)
    {
        var task = tasks.Todos.FirstOrDefault(t => t.Id == taskId);
        if (task != null)
        {
            task.Completed = true;
        }
    }

    async Task AddTask()
    {
        if (!string.IsNullOrWhiteSpace(newTaskDescription))
        {
            var newTask = new TaskModel { Description = newTaskDescription, Completed = false };
            tasks.Todos.Add(newTask);
            newTaskDescription = string.Empty;
        }
    }
}
